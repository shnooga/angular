{"ast":null,"code":"var _class;\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction LoginComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1, \" Invalid Username or Password\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"is-valid\": a0,\n    \"is-invalid\": a1\n  };\n};\nexport class LoginComponent {\n  constructor(authService, router, httpClient) {\n    this.authService = authService;\n    this.router = router;\n    this.httpClient = httpClient;\n    this.loginForm = new FormGroup({\n      UserName: new FormControl('', [Validators.required, Validators.minLength(LoginComponent.MIN_CHAR_LENGTH)]),\n      Password: new FormControl('', [Validators.required, Validators.minLength(LoginComponent.MIN_CHAR_LENGTH)])\n    });\n    this.IsAuthenticatiionFailed = false;\n  }\n  login() {\n    this.authService.authenticate(this.loginForm.value);\n    // this.httpClient.post(\"http://localhost:4000/signin\", this.loginForm.value).subscribe(response => {\n    //     let dataJson = JSON.parse(JSON.stringify(response));\n    //     if (dataJson.token == undefined) {\n    //         this.IsAuthenticatiionFailed = true;\n    //     } else {\n    //         this.router.navigate(['customer']);\n    //         localStorage['token'] = dataJson.token;\n    //     }\n    // });\n  }\n\n  FailsRequired(inputName) {\n    let f = this.loginForm.get(inputName);\n    return !(f?.dirty && f.errors?.['required']);\n  }\n  FailsMinChar(inputName) {\n    let f = this.loginForm.get(inputName);\n    return !(f?.dirty && f.errors?.['minlength']);\n  }\n}\n_class = LoginComponent;\n_class.MIN_CHAR_LENGTH = 5;\n_class.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"login\"]],\n  decls: 23,\n  vars: 15,\n  consts: [[1, \"container-fluid\", \"pt-3\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\", 3, \"formGroup\"], [1, \"form-group\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"for\", \"UserName\"], [\"autofocus\", \"\", \"formControlName\", \"UserName\", \"type\", \"text\", \"name\", \"UserName\", 1, \"form-control\", 3, \"ngClass\"], [1, \"alert\", \"alert-danger\", 3, \"hidden\"], [\"for\", \"Password\"], [\"formControlName\", \"Password\", \"type\", \"password\", \"name\", \"Password\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"submit\", \"value\", \"Login\", 1, \"btn\", \"btn-success\", 3, \"disabled\", \"click\"], [1, \"alert\", \"alert-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h5\", 2);\n      i0.ɵɵtext(3, \" login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 3)(5, \"div\", 4);\n      i0.ɵɵtemplate(6, LoginComponent_div_6_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementStart(7, \"label\", 6);\n      i0.ɵɵtext(8, \" User Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementStart(10, \"div\", 8);\n      i0.ɵɵtext(11, \" Enter user name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 8);\n      i0.ɵɵtext(13, \" Min 5 chars\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 4)(15, \"label\", 9);\n      i0.ɵɵtext(16, \" Password: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 10);\n      i0.ɵɵelementStart(18, \"div\", 8);\n      i0.ɵɵtext(19, \" Enter pass word wanker!!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 8);\n      i0.ɵɵtext(21, \" Min 6 chars wanker!!\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(22, \"input\", 11);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_input_click_22_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.IsAuthenticatiionFailed);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(9, _c0, ctx.loginForm.controls.UserName.valid, ctx.loginForm.controls.UserName.invalid));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", !(ctx.loginForm.controls.UserName.dirty && (ctx.loginForm.controls.UserName.errors == null ? null : ctx.loginForm.controls.UserName.errors[\"required\"])));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hidden\", !(ctx.loginForm.controls.UserName.dirty && (ctx.loginForm.controls.UserName.errors == null ? null : ctx.loginForm.controls.UserName.errors[\"minlength\"])));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(12, _c0, ctx.loginForm.controls.Password.valid, ctx.loginForm.controls.Password.invalid));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"hidden\", ctx.FailsRequired(\"Password\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"hidden\", ctx.FailsMinChar(\"Password\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"names":["FormGroup","FormControl","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","LoginComponent","constructor","authService","router","httpClient","loginForm","UserName","required","minLength","MIN_CHAR_LENGTH","Password","IsAuthenticatiionFailed","login","authenticate","value","FailsRequired","inputName","f","get","dirty","errors","FailsMinChar","_class","ɵɵdirectiveInject","i1","AuthenticationService","i2","Router","i3","HttpClient","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵtemplate","LoginComponent_div_6_Template","ɵɵelement","ɵɵlistener","LoginComponent_Template_input_click_22_listener","ɵɵadvance","ɵɵproperty","ɵɵpureFunction2","_c0","controls","valid","invalid"],"sources":["/Users/huey.nguyen/code/angular/lab-observable/src/app/login/login.component.ts","/Users/huey.nguyen/code/angular/lab-observable/src/app/login/login.component.html"],"sourcesContent":["import {HttpClient} from '@angular/common/http';\nimport {Component} from '@angular/core';\nimport {FormGroup, FormControl, Validators} from '@angular/forms';\nimport {Router} from '@angular/router';\nimport {AuthenticationService} from \"../services/authentication.service\";\nimport {User} from \"../model/user\";\n\n@Component({\n    selector: 'login',\n    templateUrl: './login.component.html',\n})\n\n\nexport class LoginComponent {\n    public static readonly MIN_CHAR_LENGTH = 5;\n    IsAuthenticatiionFailed: boolean;\n\n    loginForm = new FormGroup({\n        UserName: new FormControl('', [\n            Validators.required,\n            Validators.minLength(LoginComponent.MIN_CHAR_LENGTH),\n        ]),\n        Password: new FormControl('', [\n            Validators.required,\n            Validators.minLength(LoginComponent.MIN_CHAR_LENGTH),\n        ]),\n    });\n\n    constructor(private authService: AuthenticationService, private router: Router, private httpClient: HttpClient) {\n        this.IsAuthenticatiionFailed = false;\n    }\n\n    login() {\n        this.authService\n            .authenticate(this.loginForm.value);\n\n        // this.httpClient.post(\"http://localhost:4000/signin\", this.loginForm.value).subscribe(response => {\n        //     let dataJson = JSON.parse(JSON.stringify(response));\n        //     if (dataJson.token == undefined) {\n        //         this.IsAuthenticatiionFailed = true;\n        //     } else {\n        //         this.router.navigate(['customer']);\n        //         localStorage['token'] = dataJson.token;\n        //     }\n        // });\n    }\n\n    FailsRequired(inputName: string): boolean {\n        let f = this.loginForm.get(inputName);\n        return !(f?.dirty && f.errors?.['required']);\n    }\n\n    FailsMinChar(inputName: string): boolean {\n        let f = this.loginForm.get(inputName);\n        return !(f?.dirty && f.errors?.['minlength']);\n    }\n}\n","<div class=\"container-fluid pt-3\">\n    <div class=\"card\">\n        <h5 class=\"card-header\"> login </h5>\n        <form class=\"card-body\" [formGroup]=\"loginForm\">\n            <div class=\"form-group\">\n                <div class=\"alert alert-danger\" *ngIf=\"IsAuthenticatiionFailed\"> Invalid Username or Password</div>\n                <label for=\"UserName\"> User Name: </label>\n                <input class=\"form-control\" autofocus [ngClass]=\"{'is-valid':loginForm.controls.UserName.valid, 'is-invalid':loginForm.controls.UserName.invalid}\" formControlName=\"UserName\" type=\"text\" name=\"UserName\">\n                <div class=\"alert alert-danger\" [hidden]=\"!(loginForm.controls.UserName.dirty && loginForm.controls.UserName.errors?.['required'])\"> Enter user name</div>\n                <div class=\"alert alert-danger\" [hidden]=\"!(loginForm.controls.UserName.dirty && loginForm.controls.UserName.errors?.['minlength'])\"> Min 5 chars</div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"Password\"> Password: </label>\n                <input class=\"form-control\" [ngClass]=\"{'is-valid':loginForm.controls.Password.valid, 'is-invalid':loginForm.controls.Password.invalid}\" formControlName=\"Password\" type=\"password\" name=\"Password\">\n                <div class=\"alert alert-danger\" [hidden]=\"FailsRequired('Password')\"> Enter pass word wanker!!</div>\n                <div class=\"alert alert-danger\" [hidden]=\"FailsMinChar('Password')\"> Min 6 chars wanker!!</div>\n            </div>\n            <input type=\"submit\" class=\"btn btn-success\" value=\"Login\" (click)=\"login()\" [disabled]=\"loginForm.invalid\">\n        </form>\n    </div>\n</div>\n\n\n<!--Minimalist version-->\n<!--<form class=\"card-body\" [formGroup]=\"loginForm\">-->\n<!--    <div class=\"form-group\">-->\n<!--        <div class=\"alert alert-danger\" *ngIf=\"IsAuthenticatiionFailed\"> Invalid Username or Password</div>-->\n<!--        <label for=\"UserName\"> User Name: </label>-->\n<!--        <input class=\"form-control\" autofocus formControlName=\"UserName\" type=\"text\" name=\"UserName\">-->\n<!--    </div>-->\n<!--    <div class=\"form-group\">-->\n<!--        <label for=\"Password\"> Password: </label>-->\n<!--        <input class=\"form-control\" formControlName=\"Password\" type=\"password\" name=\"Password\">-->\n<!--    </div>-->\n<!--    <input type=\"submit\" class=\"btn btn-success\" value=\"Login\" (click)=\"login()\" [disabled]=\"loginForm.invalid\">-->\n<!--</form>-->\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}